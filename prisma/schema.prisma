generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String @id @default(cuid())
    name          String?
    email         String?  @unique
    emailVerified DateTime?
    image         String?

    accounts      Account[]
    sessions      Session[]

    projects      Project[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
    id              String @id @default(cuid())
    userId          String
    name            String   @default("Untitled Base")
    color           String   @default("#808080")
    lastAccessedAt  DateTime @default(now())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

    tables          Table[]

    @@index([userId])
}

enum ColumnType {
    text
    number
}

model Table {
    id         String         @id @default(cuid())
    projectId  String
    name       String         @default("Untitled Table")
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt

    project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    columns    TableColumn[]
    rows       TableRow[]
    views      TableView[]

    @@index([projectId])
}

model TableColumn {
  id        String     @id @default(cuid())
  tableId   String
  name      String
  key       String  
  type      ColumnType
  position  Int      
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, key])
  @@index([tableId, position])
}

model TableRow {
  id             String    @id @default(cuid())
  tableId        String
  // All cell values live here by column key:
  // e.g. { "col_name": "Acme", "col_amount": 123.45 }
  data           Json
  lastAccessedAt DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId, updatedAt])
  @@index([tableId, createdAt])
}

model TableView {
  id        String   @id @default(cuid())
  tableId   String
  name      String   @default("Grid view")
  // JSON config: { search: string, hidden: string[], filters: [...], sorts: [...] }
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
}
